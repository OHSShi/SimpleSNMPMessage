#include	"Message.hpp"
#include	<stdio.h>

int		main( int argc , char** argv )
{
	SNMPMessage *ptr = 0;
	SNMPMessage *ptr1 = 0;
	char mVersion;
	
	mVersion = C_SNMP_V1;

	switch( mVersion )
	{
		case C_SNMP_V1 : 
			ptr = new Message;
			ptr1 = new Message;
			break;

		default :
			break;

	}

	if( ptr == NULL )
	{
		cout << "Error! No memory for ptr!" << endl;
		exit( -1 );
	}

	ptr -> SetVB( "1.3.6.1.4.1.2680.1.2.7.3.2.0" , "APLLE" );
	ptr -> SetVB( "1.3.6.1.4.1.2680.1.2.7.3.2.1" , "Orange" );
	ptr -> SetVB( "1.3.6.1.4.1.2680.1.2.7.3.2.2" , "123" );
	ptr -> SetVB( "1.3.6.1.4.1.2680.1.2.7.3.2.2" , "123" );
	ptr -> SetVB( "1.3.6.1.4.1.2680.1.2.7.3.2.2" , "123" );
	ptr -> SetVB( "1.3.6.1.4.1.2680.1.2.7.3.2.2" , "123" );
	ptr -> SetVB( "1.3.6.1.4.1.2680.1.2.7.3.2.4" , 1 );
	ptr -> SetVB( "1.3.6.1.4.1.2680.1.2.7.3.2.3" );
	ptr -> SetVB( "1.3.6.1.4.1.2680.1.2.7.3.2.3" , "ABCD" );

	ptr -> SetCommunity		( "private" );
	ptr -> SetPDUType		( C_GETREQUESTPDU_DATATYPE );
	ptr -> SetRequestID		( 1 );
	ptr -> SetError			( 0x00 );
	ptr -> SetErrorIndex	( 0 );

	int ret = ptr -> Assemble();

	/*
	string rAssemble = ptr -> GetAssemble();
	if( ret > 0 )
	{
		for( int i = 0 ; i < rAssemble.size() ; i++)
		{
			printf( "[%02x] \n" , rAssemble[i] );
		}
	}
	*/

	char		tmpStr[ 1024 ];

	/*
	tmpStr[0  ] = 0x30;
	tmpStr[1  ] = 0x82;
	tmpStr[2  ] = 0x01;
	tmpStr[3  ] = 0x19;
	tmpStr[4  ] = 0x02;
	tmpStr[5  ] = 0x01;
	tmpStr[6  ] = 0x00;
	tmpStr[7  ] = 0x04;
	tmpStr[8  ] = 0x07;
	tmpStr[9  ] = 0x6e;
	tmpStr[10 ] = 0x61;
	tmpStr[11 ] = 0x73;
	tmpStr[12 ] = 0x74;
	tmpStr[13 ] = 0x65;
	tmpStr[14 ] = 0x63;
	tmpStr[15 ] = 0x68;
	tmpStr[16 ] = 0xa4;
	tmpStr[17 ] = 0x82;
	tmpStr[18 ] = 0x01;
	tmpStr[19 ] = 0x09;
	tmpStr[20 ] = 0x06;
	tmpStr[21 ] = 0x09;
	tmpStr[22 ] = 0x2b;
	tmpStr[23 ] = 0x06;
	tmpStr[24 ] = 0x01;
	tmpStr[25 ] = 0x04;
	tmpStr[26 ] = 0x01;
	tmpStr[27 ] = 0x09;
	tmpStr[28 ] = 0x09;
	tmpStr[29 ] = 0x29;
	tmpStr[30 ] = 0x02;
	tmpStr[31 ] = 0x40;
	tmpStr[32 ] = 0x04;
	tmpStr[33 ] = 0xc8;
	tmpStr[34 ] = 0x01;
	tmpStr[35 ] = 0x0f;
	tmpStr[36 ] = 0x65;
	tmpStr[37 ] = 0x02;
	tmpStr[38 ] = 0x01;
	tmpStr[39 ] = 0x06;
	tmpStr[40 ] = 0x02;
	tmpStr[41 ] = 0x01;
	tmpStr[42 ] = 0x01;
	tmpStr[43 ] = 0x43;
	tmpStr[44 ] = 0x04;
	tmpStr[45 ] = 0x7f;
	tmpStr[46 ] = 0xbb;
	tmpStr[47 ] = 0x7a;
	tmpStr[48 ] = 0x8d;
	tmpStr[49 ] = 0x30;
	tmpStr[50 ] = 0x81;
	tmpStr[51 ] = 0xe9;
	tmpStr[52 ] = 0x30;
	tmpStr[53 ] = 0x16;
	tmpStr[54 ] = 0x06;
	tmpStr[55 ] = 0x0f;
	tmpStr[56 ] = 0x2b;
	tmpStr[57 ] = 0x06;
	tmpStr[58 ] = 0x01;
	tmpStr[59 ] = 0x04;
	tmpStr[60 ] = 0x01;
	tmpStr[61 ] = 0x09;
	tmpStr[62 ] = 0x09;
	tmpStr[63 ] = 0x29;
	tmpStr[64 ] = 0x01;
	tmpStr[65 ] = 0x02;
	tmpStr[66 ] = 0x03;
	tmpStr[67 ] = 0x01;
	tmpStr[68 ] = 0x02;
	tmpStr[69 ] = 0xec;
	tmpStr[70 ] = 0x55;
	tmpStr[71 ] = 0x04;
	tmpStr[72 ] = 0x03;
	tmpStr[73 ] = 0x43;
	tmpStr[74 ] = 0x44;
	tmpStr[75 ] = 0x50;
	tmpStr[76 ] = 0x30;
	tmpStr[77 ] = 0x14;
	tmpStr[78 ] = 0x06;
	tmpStr[79 ] = 0x0f;
	tmpStr[80 ] = 0x2b;
	tmpStr[81 ] = 0x06;
	tmpStr[82 ] = 0x01;
	tmpStr[83 ] = 0x04;
	tmpStr[84 ] = 0x01;
	tmpStr[85 ] = 0x09;
	tmpStr[86 ] = 0x09;
	tmpStr[87 ] = 0x29;
	tmpStr[88 ] = 0x01;
	tmpStr[89 ] = 0x02;
	tmpStr[90 ] = 0x03;
	tmpStr[91 ] = 0x01;
	tmpStr[92 ] = 0x03;
	tmpStr[93 ] = 0xec;
	tmpStr[94 ] = 0x55;
	tmpStr[95 ] = 0x02;
	tmpStr[96 ] = 0x01;
	tmpStr[97 ] = 0x05;
	tmpStr[98 ] = 0x30;
	tmpStr[99 ] = 0x22;
	tmpStr[100] = 0x06;
	tmpStr[101] = 0x0f;
	tmpStr[102] = 0x2b;
	tmpStr[103] = 0x06;
	tmpStr[104] = 0x01;
	tmpStr[105] = 0x04;
	tmpStr[106] = 0x01;
	tmpStr[107] = 0x09;
	tmpStr[108] = 0x09;
	tmpStr[109] = 0x29;
	tmpStr[110] = 0x01;
	tmpStr[111] = 0x02;
	tmpStr[112] = 0x03;
	tmpStr[113] = 0x01;
	tmpStr[114] = 0x04;
	tmpStr[115] = 0xec;
	tmpStr[116] = 0x55;
	tmpStr[117] = 0x04;
	tmpStr[118] = 0x0f;
	tmpStr[119] = 0x44;
	tmpStr[120] = 0x55;
	tmpStr[121] = 0x50;
	tmpStr[122] = 0x4c;
	tmpStr[123] = 0x45;
	tmpStr[124] = 0x58;
	tmpStr[125] = 0x5f;
	tmpStr[126] = 0x4d;
	tmpStr[127] = 0x49;
	tmpStr[128] = 0x53;
	tmpStr[129] = 0x4d;
	tmpStr[130] = 0x41;
	tmpStr[131] = 0x54;
	tmpStr[132] = 0x43;
	tmpStr[133] = 0x48;
	tmpStr[134] = 0x30;
	tmpStr[135] = 0x7c;
	tmpStr[136] = 0x06;
	tmpStr[137] = 0x0f;
	tmpStr[138] = 0x2b;
	tmpStr[139] = 0x06;
	tmpStr[140] = 0x01;
	tmpStr[141] = 0x04;
	tmpStr[142] = 0x01;
	tmpStr[143] = 0x09;
	tmpStr[144] = 0x09;
	tmpStr[145] = 0x29;
	tmpStr[146] = 0x01;
	tmpStr[147] = 0x02;
	tmpStr[148] = 0x03;
	tmpStr[149] = 0x01;
	tmpStr[150] = 0x05;
	tmpStr[151] = 0xec;
	tmpStr[152] = 0x55;
	tmpStr[153] = 0x04;
	tmpStr[154] = 0x69;
	tmpStr[155] = 0x64;
	tmpStr[156] = 0x75;
	tmpStr[157] = 0x70;
	tmpStr[158] = 0x6c;
	tmpStr[159] = 0x65;
	tmpStr[160] = 0x78;
	tmpStr[161] = 0x20;
	tmpStr[162] = 0x6d;
	tmpStr[163] = 0x69;
	tmpStr[164] = 0x73;
	tmpStr[165] = 0x6d;
	tmpStr[166] = 0x61;
	tmpStr[167] = 0x74;
	tmpStr[168] = 0x63;
	tmpStr[169] = 0x68;
	tmpStr[170] = 0x20;
	tmpStr[171] = 0x64;
	tmpStr[172] = 0x69;
	tmpStr[173] = 0x73;
	tmpStr[174] = 0x63;
	tmpStr[175] = 0x6f;
	tmpStr[176] = 0x76;
	tmpStr[177] = 0x65;
	tmpStr[178] = 0x72;
	tmpStr[179] = 0x65;
	tmpStr[180] = 0x64;
	tmpStr[181] = 0x20;
	tmpStr[182] = 0x6f;
	tmpStr[183] = 0x6e;
	tmpStr[184] = 0x20;
	tmpStr[185] = 0x46;
	tmpStr[186] = 0x61;
	tmpStr[187] = 0x73;
	tmpStr[188] = 0x74;
	tmpStr[189] = 0x45;
	tmpStr[190] = 0x74;
	tmpStr[191] = 0x68;
	tmpStr[192] = 0x65;
	tmpStr[193] = 0x72;
	tmpStr[194] = 0x6e;
	tmpStr[195] = 0x65;
	tmpStr[196] = 0x74;
	tmpStr[197] = 0x30;
	tmpStr[198] = 0x20;
	tmpStr[199] = 0x28;
	tmpStr[200] = 0x6e;
	tmpStr[201] = 0x6f;
	tmpStr[202] = 0x74;
	tmpStr[203] = 0x20;
	tmpStr[204] = 0x66;
	tmpStr[205] = 0x75;
	tmpStr[206] = 0x6c;
	tmpStr[207] = 0x6c;
	tmpStr[208] = 0x20;
	tmpStr[209] = 0x64;
	tmpStr[210] = 0x75;
	tmpStr[211] = 0x70;
	tmpStr[212] = 0x6c;
	tmpStr[213] = 0x65;
	tmpStr[214] = 0x78;
	tmpStr[215] = 0x29;
	tmpStr[216] = 0x2c;
	tmpStr[217] = 0x20;
	tmpStr[218] = 0x77;
	tmpStr[219] = 0x69;
	tmpStr[220] = 0x74;
	tmpStr[221] = 0x68;
	tmpStr[222] = 0x20;
	tmpStr[223] = 0x53;
	tmpStr[224] = 0x77;
	tmpStr[225] = 0x69;
	tmpStr[226] = 0x74;
	tmpStr[227] = 0x63;
	tmpStr[228] = 0x68;
	tmpStr[229] = 0x20;
	tmpStr[230] = 0x46;
	tmpStr[231] = 0x61;
	tmpStr[232] = 0x73;
	tmpStr[233] = 0x74;
	tmpStr[234] = 0x45;
	tmpStr[235] = 0x74;
	tmpStr[236] = 0x68;
	tmpStr[237] = 0x65;
	tmpStr[238] = 0x72;
	tmpStr[239] = 0x6e;
	tmpStr[240] = 0x65;
	tmpStr[241] = 0x74;
	tmpStr[242] = 0x30;
	tmpStr[243] = 0x2f;
	tmpStr[244] = 0x35;
	tmpStr[245] = 0x20;
	tmpStr[246] = 0x28;
	tmpStr[247] = 0x66;
	tmpStr[248] = 0x75;
	tmpStr[249] = 0x6c;
	tmpStr[250] = 0x6c;
	tmpStr[251] = 0x20;
	tmpStr[252] = 0x64;
	tmpStr[253] = 0x75;
	tmpStr[254] = 0x70;
	tmpStr[255] = 0x6c;
	tmpStr[256] = 0x65;
	tmpStr[257] = 0x78;
	tmpStr[258] = 0x29;
	tmpStr[259] = 0x2e;
	tmpStr[260] = 0x30;
	tmpStr[261] = 0x17;
	tmpStr[262] = 0x06;
	tmpStr[263] = 0x0f;
	tmpStr[264] = 0x2b;
	tmpStr[265] = 0x06;
	tmpStr[266] = 0x01;
	tmpStr[267] = 0x04;
	tmpStr[268] = 0x01;
	tmpStr[269] = 0x09;
	tmpStr[270] = 0x09;
	tmpStr[271] = 0x29;
	tmpStr[272] = 0x01;
	tmpStr[273] = 0x02;
	tmpStr[274] = 0x03;
	tmpStr[275] = 0x01;
	tmpStr[276] = 0x06;
	tmpStr[277] = 0xec;
	tmpStr[278] = 0x55;
	tmpStr[279] = 0x43;
	tmpStr[280] = 0x04;
	tmpStr[281] = 0x7f;
	tmpStr[282] = 0xbb;
	tmpStr[283] = 0x7a;
	tmpStr[284] = 0x8d;

	string		rAssemble;
	rAssemble.assign( tmpStr , 285 );
	*/

	tmpStr[0  ] = 0x30;
	tmpStr[1  ] = 0x81;
	tmpStr[2  ] = 0xd9;
	tmpStr[3  ] = 0x02;
	tmpStr[4  ] = 0x01;
	tmpStr[5  ] = 0x00;
	tmpStr[6  ] = 0x04;
	tmpStr[7  ] = 0x07;
	tmpStr[8  ] = 0x68;
	tmpStr[9  ] = 0x65;
	tmpStr[10 ] = 0x6c;
	tmpStr[11 ] = 0x6c;
	tmpStr[12 ] = 0x6f;
	tmpStr[13 ] = 0x77;
	tmpStr[14 ] = 0x21;
	tmpStr[15 ] = 0xa4;
	tmpStr[16 ] = 0x81;
	tmpStr[17 ] = 0xca;
	tmpStr[18 ] = 0x06;
	tmpStr[19 ] = 0x09;
	tmpStr[20 ] = 0x2b;
	tmpStr[21 ] = 0x06;
	tmpStr[22 ] = 0x01;
	tmpStr[23 ] = 0x06;
	tmpStr[24 ] = 0x03;
	tmpStr[25 ] = 0x01;
	tmpStr[26 ] = 0x01;
	tmpStr[27 ] = 0x05;
	tmpStr[28 ] = 0x02;
	tmpStr[29 ] = 0x40;
	tmpStr[30 ] = 0x04;
	tmpStr[31 ] = 0x00;
	tmpStr[32 ] = 0x00;
	tmpStr[33 ] = 0x00;
	tmpStr[34 ] = 0x00;
	tmpStr[35 ] = 0x02;
	tmpStr[36 ] = 0x01;
	tmpStr[37 ] = 0x00;
	tmpStr[38 ] = 0x02;
	tmpStr[39 ] = 0x01;
	tmpStr[40 ] = 0x00;
	tmpStr[41 ] = 0x43;
	tmpStr[42 ] = 0x04;
	tmpStr[43 ] = 0x08;
	tmpStr[44 ] = 0xd0;
	tmpStr[45 ] = 0xb6;
	tmpStr[46 ] = 0xa9;
	tmpStr[47 ] = 0x30;
	tmpStr[48 ] = 0x81;
	tmpStr[49 ] = 0xaa;
	tmpStr[50 ] = 0x30;
	tmpStr[51 ] = 0x81;
	tmpStr[52 ] = 0xa7;
	tmpStr[53 ] = 0x06;
	tmpStr[54 ] = 0x05;
	tmpStr[55 ] = 0x2b;
	tmpStr[56 ] = 0x06;
	tmpStr[57 ] = 0x01;
	tmpStr[58 ] = 0x04;
	tmpStr[59 ] = 0x01;
	tmpStr[60 ] = 0x04;
	tmpStr[61 ] = 0x81;
	tmpStr[62 ] = 0x9d;
	tmpStr[63 ] = 0x41;
	tmpStr[64 ] = 0x41;
	tmpStr[65 ] = 0x41;
	tmpStr[66 ] = 0x41;
	tmpStr[67 ] = 0x41;
	tmpStr[68 ] = 0x41;
	tmpStr[69 ] = 0x41;
	tmpStr[70 ] = 0x41;
	tmpStr[71 ] = 0x41;
	tmpStr[72 ] = 0x41;
	tmpStr[73 ] = 0x41;
	tmpStr[74 ] = 0x41;
	tmpStr[75 ] = 0x41;
	tmpStr[76 ] = 0x41;
	tmpStr[77 ] = 0x41;
	tmpStr[78 ] = 0x41;
	tmpStr[79 ] = 0x41;
	tmpStr[80 ] = 0x41;
	tmpStr[81 ] = 0x41;
	tmpStr[82 ] = 0x41;
	tmpStr[83 ] = 0x41;
	tmpStr[84 ] = 0x41;
	tmpStr[85 ] = 0x41;
	tmpStr[86 ] = 0x41;
	tmpStr[87 ] = 0x41;
	tmpStr[88 ] = 0x41;
	tmpStr[89 ] = 0x41;
	tmpStr[90 ] = 0x41;
	tmpStr[91 ] = 0x41;
	tmpStr[92 ] = 0x41;
	tmpStr[93 ] = 0x41;
	tmpStr[94 ] = 0x41;
	tmpStr[95 ] = 0x41;
	tmpStr[96 ] = 0x41;
	tmpStr[97 ] = 0x41;
	tmpStr[98 ] = 0x41;
	tmpStr[99 ] = 0x41;
	tmpStr[100] = 0x41;
	tmpStr[101] = 0x41;
	tmpStr[102] = 0x41;
	tmpStr[103] = 0x41;
	tmpStr[104] = 0x41;
	tmpStr[105] = 0x41;
	tmpStr[106] = 0x41;
	tmpStr[107] = 0x41;
	tmpStr[108] = 0x41;
	tmpStr[109] = 0x41;
	tmpStr[110] = 0x41;
	tmpStr[111] = 0x41;
	tmpStr[112] = 0x41;
	tmpStr[113] = 0x41;
	tmpStr[114] = 0x41;
	tmpStr[115] = 0x41;
	tmpStr[116] = 0x41;
	tmpStr[117] = 0x41;
	tmpStr[118] = 0x41;
	tmpStr[119] = 0x41;
	tmpStr[120] = 0x41;
	tmpStr[121] = 0x41;
	tmpStr[122] = 0x41;
	tmpStr[123] = 0x41;
	tmpStr[124] = 0x41;
	tmpStr[125] = 0x41;
	tmpStr[126] = 0x41;
	tmpStr[127] = 0x41;
	tmpStr[128] = 0x41;
	tmpStr[129] = 0x41;
	tmpStr[130] = 0x41;
	tmpStr[131] = 0x41;
	tmpStr[132] = 0x41;
	tmpStr[133] = 0x41;
	tmpStr[134] = 0x41;
	tmpStr[135] = 0x41;
	tmpStr[136] = 0x41;
	tmpStr[137] = 0x41;
	tmpStr[138] = 0x41;
	tmpStr[139] = 0x41;
	tmpStr[140] = 0x41;
	tmpStr[141] = 0x41;
	tmpStr[142] = 0x41;
	tmpStr[143] = 0x41;
	tmpStr[144] = 0x41;
	tmpStr[145] = 0x41;
	tmpStr[146] = 0x41;
	tmpStr[147] = 0x41;
	tmpStr[148] = 0x41;
	tmpStr[149] = 0x41;
	tmpStr[150] = 0x41;
	tmpStr[151] = 0x41;
	tmpStr[152] = 0x41;
	tmpStr[153] = 0x41;
	tmpStr[154] = 0x41;
	tmpStr[155] = 0x41;
	tmpStr[156] = 0x41;
	tmpStr[157] = 0x41;
	tmpStr[158] = 0x41;
	tmpStr[159] = 0x41;
	tmpStr[160] = 0x41;
	tmpStr[161] = 0x41;
	tmpStr[162] = 0x41;
	tmpStr[163] = 0x41;
	tmpStr[164] = 0x41;
	tmpStr[165] = 0x41;
	tmpStr[166] = 0x41;
	tmpStr[167] = 0x41;
	tmpStr[168] = 0x41;
	tmpStr[169] = 0x41;
	tmpStr[170] = 0x41;
	tmpStr[171] = 0x41;
	tmpStr[172] = 0x41;
	tmpStr[173] = 0x41;
	tmpStr[174] = 0x41;
	tmpStr[175] = 0x41;
	tmpStr[176] = 0x41;
	tmpStr[177] = 0x41;
	tmpStr[178] = 0x41;
	tmpStr[179] = 0x41;
	tmpStr[180] = 0x41;
	tmpStr[181] = 0x41;
	tmpStr[182] = 0x41;
	tmpStr[183] = 0x41;
	tmpStr[184] = 0x41;
	tmpStr[185] = 0x41;
	tmpStr[186] = 0x41;
	tmpStr[187] = 0x41;
	tmpStr[188] = 0x41;
	tmpStr[189] = 0x41;
	tmpStr[190] = 0x41;
	tmpStr[191] = 0x41;
	tmpStr[192] = 0x41;
	tmpStr[193] = 0x41;
	tmpStr[194] = 0x41;
	tmpStr[195] = 0x41;
	tmpStr[196] = 0x41;
	tmpStr[197] = 0x41;
	tmpStr[198] = 0x41;
	tmpStr[199] = 0x41;
	tmpStr[200] = 0x41;
	tmpStr[201] = 0x41;
	tmpStr[202] = 0x41;
	tmpStr[203] = 0x41;
	tmpStr[204] = 0x41;
	tmpStr[205] = 0x41;
	tmpStr[206] = 0x41;
	tmpStr[207] = 0x41;
	tmpStr[208] = 0x41;
	tmpStr[209] = 0x41;
	tmpStr[210] = 0x41;
	tmpStr[211] = 0x41;
	tmpStr[212] = 0x41;
	tmpStr[213] = 0x41;
	tmpStr[214] = 0x41;
	tmpStr[215] = 0x41;
	tmpStr[216] = 0x41;
	tmpStr[217] = 0x41;
	tmpStr[218] = 0x41;
	tmpStr[219] = 0x41;
	string		rAssemble;
	rAssemble.assign( tmpStr , 220 );

	ret = ptr1 -> Analyze( rAssemble );
	if( ret != 0 )
	{
		printf( "Analyze Error\n" );
		exit( -1 );
	}

	cout << "Version		= " << ptr1 -> GetVersion()		<< endl;
	cout << "Community	= " << ptr1 -> GetCommunity()		<< endl;
	/*
	cout << "RequestID	= " << ptr1 -> GetRequestID()		<< endl;
	cout << "Error		= " << ptr1 -> GetError()			<< endl;
	cout << "ErrorIndex	= " << ptr1 -> GetErrorIndex()		<< endl;
	*/
	cout << "ENT_OID	= " << ptr1->GetEnterpriseOid()		<< endl;
	cout << "SEND_ADDR	= " << ptr1->GetSenderAddr()		<< endl;
	cout << "GenericTrap	= " << ptr1->GetGenericTrap()		<< endl;
	cout << "Specific	= " << ptr1->GetSpecificTrap()		<< endl;
	cout << "TimeStamp	= " << ptr1->GetTimeTicks()		<< endl;

	for( int i = 0 ; i < ptr1 -> GetVBCount() ; i++ )
	{
		cout << endl << "-----(" << i << ")-----" << endl;
		cout << "Object ID	= " << ptr1 -> GetObjectID( i )	<< endl;
		cout << "Value		= " << ptr1 -> GetValue( i )		<< endl;
	}
	
	delete ptr1;
	ptr1 = 0;
}
